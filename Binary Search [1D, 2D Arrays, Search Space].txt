-------------------------------------------------------------Easy--------------------------------------------------------------------------------
704. Binary Search to find X in sorted array

Optimal:
---------
def search(self, nums: List[int], target: int) -> int:
        l=0
        r=len(nums)-1
        while l<=r:
            mid=(l+r)//2
            if nums[mid]==target:
                return mid
            elif target<nums[mid]:
                r=mid-1
            else:
                l=mid+1
        else:
            return -1

_________________________________________________________________________________________________________________________________________________________________________
Floor in a Sorted Array
------------------------

Brute force:
------------
def findFloor(self, arr, x):
        ans=-1
        for i in range(len(arr)):
            if arr[i]<=x:
                ans=i
            else:
                break
        return ans

Optimal:
-------

def findFloor(self, arr, x):
        l=0
        r=len(arr)-1
        floor=-1
        while l<=r:
            mid=(l+r)//2
            if x>=arr[mid]:
                floor=mid
                l=mid+1
            else:
                r=mid-1
        return floor


_________________________________________________________________________________________________________________________________________________________________________

	
Implement Upper Bound:
---------------------=

Optimal Force:
------------

floor=-1
        ceil=-1
        for i in arr:
            if i>x:
                if ceil==-1:
                    ceil=i
                ceil=min(ceil,i)
            elif i<x:
                floor=max(floor,i)
            else:
                ceil=x
                floor=x
                break
        return floor, ceil

Upper bound:
------------
end=-1
l=0
r=len(nums)-1
while l<=r:
    mid = (l + r) // 2
    if target >= nums[mid]:
        end = mid
        l = mid + 1
    else:
        r = mid - 1
print(end)
_________________________________________________________________________________________________________________________________________________________________________
35. Search Insert Position
---------------------------

Brute Force:
------------
def searchInsert(self, nums: List[int], target: int) -> int:
        for i in range(len(nums)):
            if nums[i]==target or nums[i]>target:
                return i
        else:
            return len(nums)

Optimal:
--------
def searchInsert(self, nums: List[int], target: int) -> int:
        l=0
        r=len(nums)-1
        while l<=r:
            mid =(l+r)//2
            if target>nums[mid]:
                l=mid+1
            elif target<nums[mid]:
                r=mid-1
            else:
                return mid
        return l
                
_________________________________________________________________________________________________________________________________________________________________________

34. Find First and Last Position of Element in Sorted Array
-----------------------------------------------------------

Brute Force:
-----------
nums =  [5,7,7,10]
target = 8
first=-1
last=-1
for i in range(len(nums)):
    if nums[i]==target:
        if first==-1:
            first=i
        else:
            last=max(last,i)
if first!=-1:
    print(first,first)
else:
    print(first,last)

Optimal:
--------
nums = [5,7,7,8,8,10]
target=8
first=-1
l=0
r=len(nums)-1
while l<=r:
    mid=(l+r)//2
    if nums[mid]>=target:
        r=mid-1
    else:
        l=mid+1
    if nums[mid]==target:
        first=mid
last=-1
l=0
r=len(nums)-1
while l<=r:
    mid=(l+r)//2
    if nums[mid]<=target:
        l=mid+1
    else:
        r=mid-1
    if nums[mid]==target:
        last=mid
print(first)
print(last)

_________________________________________________________________________________________________________________________________________________________________________
Number of occurrence
---------------------

Optimal:
---------
nums= [8, 9, 10, 12, 12, 12]
target=12
dic={}
for i in nums:
    if i not in dic:
        dic[i]=1
    else:
        dic[i]+=1
if target in dic:
    print(dic[target])
else:
    print(0)

_________________________________________________________________________________________________________________________________________________________________________
33. Search in Rotated Sorted Array

Liner search:
-------------
nums = [4, 5, 6, 7, 0, 1, 2]
target=8
for i in range(len(nums)):
    if target==nums[i]:
        print(i)
        break
else:
    print(-1)

Optimal binary search:
---------------------
intuition:(identify the sorted half)

nums = [4, 5, 6, 7, 0, 1, 2]
target=6
l=0
r=len(nums)-1
while l<=r:
    mid=(l+r)//2
    if nums[mid]==target:
        print(mid)
        break
    if nums[l]<=nums[mid]:
        if nums[l]<=target and target<=nums[mid]:
            r=mid-1
        else:
            l=mid+1
    else:
        if nums[mid]<=target and target<=nums[r]:
            l=mid+1
        else:
            r=mid-1
print(-1)

_________________________________________________________________________________________________________________________________________________________________________
81. Search in Rotated Sorted Array II
-------------------------------------

Linear Search:
--------------
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        for i in nums:
            if i==target:
                return True
        else:
            return False

Binary Search:
--------------

nums = [1,0,1,1,1]
target=0
l=0
r=len(nums)-1
while l<=r:
    mid=(l+r)//2
    if nums[mid]==target:
        print(True)
    if nums[l]==nums[mid] and nums[mid]==nums[r]:
        l=l+1
        r=r-1
        continue
    if nums[l]<=nums[mid]:
        if nums[l]<=target and target<=nums[mid]:
            r=mid-1
        else:
            l=mid+1
    else:
        if nums[mid]<=target and target<=nums[r]:
            l=mid+1
        else:
            r=mid-1
print(False)

________________________________________________________________________________________________________________________________________________________________________

153. Find Minimum in Rotated Sorted Array

Linear search:
--------------
class Solution:
    def findMin(self, nums: List[int]) -> int:
        if nums[0]<nums[-1]:
            return nums[0]
        mini=nums[0]
        for i in range(1,len(nums)):
            if nums[i]<mini:
                mini=min(nums[i],mini)
                return mini
        else:
            return mini

Optimal:
--------
nums = [3,4,5,1,2]
ans=9999999
l=0
r=len(nums)-1
while l<=r:
    mid=(l+r)//2
    if nums[l]<=nums[mid]:
        ans=min(ans,nums[l])
        l=mid+1
    else:
        ans=min(ans,nums[mid])
        r=mid-1
print(ans)

______________________________________________________________________________________________________________________________________________________________________

Find Kth Rotation
-----------------

Brute force:
-----------
class Solution:
    def findKRotation(self, arr):
        count=0
        for i in range(len(arr)):
            if arr[i]>arr[i-1]:
                count+=1
            else:
                break
        return count

Optimal:
--------
nums = [39 ,6 ,11, 14, 18, 36, 37, 38]
ans=9999999
ind=-1
l=0
r=len(nums)-1
while l<=r:
    mid=(l+r)//2
    if nums[l]<=nums[mid]:
        if ans>nums[l]:
            ans=min(ans,nums[l])
            ind=l
        l=mid+1
    else:
        if ans>nums[mid]:
            ans=min(ans,nums[mid])
            ind=mid
        r=mid-1
print(ind)

________________________________________________________________________________________________________________________________________________________________________
540. Single Element in a Sorted Array
-------------------------------------

Brute force:
------------
nums = [1,1,2]
el=nums[0]
count=0
for i in nums:
    if i!=el:
        if count==1:
            print(el)
            break
        el=i
        count=1
    else:
        count+=1
if count==1:
    print(el)

Brute Force:
-----------
def singleNonDuplicate(arr):
    n = len(arr)  # Size of the array
    if n == 1:
        return arr[0]

    for i in range(n):
        # Check for first index
        if i == 0:
            if arr[i] != arr[i + 1]:
                return arr[i]
        # Check for last index
        elif i == n - 1:
            if arr[i] != arr[i - 1]:
                return arr[i]
        else:
            if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:
                return arr[i]

    # Dummy return statement
    return -1

arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]
ans = singleNonDuplicate(arr)

Optimal:
--------

intuition: index-(even,odd)->element is on right half
	   index-(odd,even)->element is on left half
	   eliminate the other half which half not containing the element

nums = [1,1,2,3,3,4,4,8,8]
if len(nums)==1:
    print(nums[0])
if nums[0]!=nums[1]:
    print(nums[0])
if nums[len(nums)-1]!=nums[len(nums)-2]:
    print(nums[len(nums)-1])

l=1
r=len(nums)-2
while l<=r:
    mid=(l+r)//2
    if nums[mid]!=nums[mid-1] and nums[mid]!=nums[mid+1]:
        print(mid)
        break
    if mid%2==0 and nums[mid]==nums[mid+1] or mid%2!=0 and nums[mid]==nums[mid-1]:
        l=mid+1
    else:
        r=mid-1
print(-1)

_________________________________________________________________________________________________________________________

162. Find Peak Element

Liner Search:
-------------
def findPeakElement(self, nums: List[int]) -> int:
        maxi=-9999999999999
        ind=0
        for i in range(len(nums)):
            if maxi<nums[i]:
                maxi=nums[i]
                ind=i
        return ind

---------------------------------------------------------MEDIUM-------------------------------------------------------------------------------------------------------------

	
Find square root of a number in log n

Brute Force:
-------------
n=36
ans=0
for i in range(1,n//2+1):
    if i*i<=n:
        ans=i
    else:
        break
print(ans)

Optimal:
-------
def floorSqrt(n):
   l=1
   r=n
   while l<=r:
      mid=(l+r)//2
      if mid*mid<=n:
         ans=mid
         l=mid+1
      else:
         r=mid-1
   return r

_________________________________________________________________________________________________________________________________________________________________________

	
 Find Nth Root Of M

Brute force:
------------
def NthRoot(n: int, m: int) -> int:
   ans=-1
   for i in range(1,m):
        if i**n==m:
            ans=i
        elif i**n>m:
            return ans
        else:
            pass

Optimal:
--------
def NthRoot(n: int, m: int) -> int:
    l=1
    r=m
    while l<=r:
        mid=(l+r)//2
        if mid**n==m:
            return mid
        elif mid**n>m:
            r=mid-1
        else:
            l=mid+1
    return -1

________________________________________________________________________________________________________________________________________________________________________

875. Koko Eating Bananas

Brute Force:
------------
piles = [3,6,7,11]
h = 8
ans=-1
for i in range(1,max(piles)+1):
    hc=0
    for j in piles:
        hc=hc+(j+i-1)//i
        if hc>h:
            break
    if hc<=h:
        ans=i
        break
print(ans)

Optimal:
---------
nums=[3,6,7,11]
h=8
l=1
r=max(nums)
while l<=r:
    mid=(l+r)//2
    hc=0
    for i in nums:
        hc=hc+(i+mid-1)//mid
    if hc<=h:
        r=mid-1
    else:
        l=mid+1

print(l)

________________________________________________________________________________________________________________________________________________________________________


1482. Minimum Number of Days to Make m Bouquets

Brute force:
-----------
nums=[7,7,7,7,12,7,7]
m=2
k=3
if m*k>len(nums):
   return -1
for i in range(min(nums),max(nums)+1):
    ans=0
    c=0
    for j in range(len(nums)):
        if nums[j]<=i:
            c+=1
            if j==len(nums)-1:
                ans=ans+(c//k)
        else:
            ans=ans+(c//k)
            c=0
    if ans>=m:
        print(i)
        break
print(-1)

OPtimal:
--------
result=-1
        l=min(bloomDay )
        r=max(bloomDay )
        while l<=r:
            mid=(l+r)//2
            c=0
            ans=0
            for i in range(len(bloomDay )):
                if bloomDay [i]<=mid:
                    c+=1
                    if i==len(bloomDay )-1:
                        ans=ans+(c//k)
                else:
                    ans=ans+(c//k)
                    c=0
            if ans<m:
                l=mid+1
            else:
                result=mid
                r=mid-1
        return result

_________________________________________________________________________________________________________________________________________________________________________

1283. Find the Smallest Divisor Given a Threshold

Brute force:
------------
nums = [44,22,33,11,1]
threshold = 5
result=0
for i in range(1,max(nums)+1):
    sum=0
    for j in nums:
        sum=sum+((j+i-1)//i)
    if sum<=threshold:
        result=i
        break
print(result)

optimal:
---------